services:
  # Zookeeper service for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: upi-fraud-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka message broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: upi-fraud-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL database
  postgres:
    image: postgres:latest
    container_name: upi-fraud-postgres
    environment:
      POSTGRES_USER: jupyteruser
      POSTGRES_PASSWORD: jupyterpass
      POSTGRES_DB: fraud_detection
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jupyteruser -d fraud_detection"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jupyter notebook server for fraud detection
  jupyter-fraud-detection:
    image: jupyter/scipy-notebook:latest
    container_name: upi-fraud-jupyter
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      DATABASE_URL: "postgresql://jupyteruser:jupyterpass@postgres:5432/fraud_detection"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:29092"
      MODEL_PATH: "/home/jovyan/work/model/fraud_detection_model.pkl"
      BACKUP_DIR: "/home/jovyan/work/model/backups"
    volumes:
      - ./notebooks:/home/jovyan/work/notebooks
      - ./model:/home/jovyan/work/model
      - ./data:/home/jovyan/work/data
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    command: "start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''"

  # FastAPI service for model serving
  fastapi-service:
    image: python:3.10-slim
    container_name: upi-fraud-fastapi
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: "postgresql://jupyteruser:jupyterpass@postgres:5432/fraud_detection"
      MODEL_PATH: "/app/model/fraud_detection_model.pkl"
    volumes:
      - ./notebooks:/app/notebooks
      - ./model:/app/model
      - ./requirements.txt:/app/requirements.txt
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "pip install -r /app/requirements.txt &&
               cd /app/notebooks &&
               uvicorn app:app --host 0.0.0.0 --port 8000 --reload"

  # Next.js 15 frontend
  nextjs-app:
    image: node:18-alpine
    container_name: upi-fraud-nextjs
    ports:
      - "3000:3000"
    environment:
      FRAUD_SERVICE_URL: "http://fastapi-service:8000"
      NEXT_PUBLIC_APP_URL: "http://localhost:3000"
      NODE_ENV: "development"
    volumes:
      - ./nextjs-app:/app
    working_dir: /app
    depends_on:
      - fastapi-service
    command: >
      sh -c "
        if [ ! -d 'node_modules' ]; then
          npm install
        fi
        npm run dev
      "

  # Kafka initialization (creates required topics)
  kafka-setup:
    image: confluentinc/cp-kafka:latest
    container_name: upi-fraud-kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        cub kafka-ready -b kafka:29092 1 30
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --replication-factor 1 --partitions 1 --topic transactions
        echo 'Kafka topics created'
        exit 0
      "

volumes:
  postgres-data:

networks:
  default:
    name: upi-fraud-network
